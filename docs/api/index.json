[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/index.js",
    "content": "/*\r\n * This file is part of basis-input-masking lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nimport TextInput from './TextInput'\r\nimport NumberInput from './NumberInput'\r\n\r\nexport { TextInput , NumberInput}\r\n",
    "static": true,
    "longname": "D:/Github/bbj-input-masking/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/NumberInput/index.js",
    "content": "/*\r\n * This file is part of basis-input-masking lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nimport NumberInput from './NumberInput'\r\n\r\nexport default NumberInput\r\n",
    "static": true,
    "longname": "D:/Github/bbj-input-masking/src/NumberInput/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/NumberInput/NumberInput.js",
    "content": "/*\r\n * This file is part of basis-input-masking lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nimport NumberMask from 'bbj-masks/src/NumberMask'\r\n\r\nconst countDecimals = value => {\r\n  if (value % 1 != 0) {\r\n    const split = value.toString().split('.')\r\n    if (split.length === 2) return split[1].length\r\n  }\r\n  return 0\r\n}\r\n\r\n/**\r\n * The `NumberInput` will wrap text inputs and apply the given [bbj Number mask](https://github.com/BasisHub/bbj-masks#number-masks)\r\n *\r\n * **Options**\r\n *\r\n * _Options can be passed via data attributes . For data attributes, append the option name to data-, as in data-mask_\r\n *\r\n * | Option    | Default | Description                                                                                             |\r\n * |-----------|---------|---------------------------------------------------------------------------------------------------------|\r\n * | mask |         | The bbj number mask @see [BBj Number Masks](https://github.com/BasisHub/bbj-masks#number-masks) |\r\n * | min |         | The maximum value to accept for this input|\r\n * | max |         | The minimum value to accept for this input|\r\n * | step |         | A stepping interval to use when using up and down arrows to adjust the value, as well as for validation|\r\n * |grouping-separator | , | a char which will be used as a grouping separator |\r\n * |decimal-separator | . | a char which will be used as a decimal separator |\r\n * |force-trailing-zeros | false | Affects the output by switching the way a mask with \"#\" characters in the trailing positions is filled. for example, the function NumberMask.mask(.10:\"#.##\") returns .10 instead of .1|\r\n *\r\n *  <br>\r\n *\r\n * **Example :**\r\n * ```html\r\n *  <input class=\"bbj-number-masked\" name=\"test\" id=\"test\" value=\"1234\" data-mask=\"##,##0\">\r\n *\r\n *  <script>\r\n *    document.addEventListener('DOMContentLoaded', function (e) {\r\n *      new Basis.InputMasking.NumberInput({\r\n *         onUpdate: (maskedValue , rawValue , input) => {\r\n *            // do something\r\n *         },\r\n *         onInvalid: (err , input) => {\r\n *            // do something\r\n *         }\r\n *      })\r\n *    })\r\n *  </script>\r\n * ```\r\n *\r\n * @author Hyyan Abo Fakher <habofakher@basis.com>\r\n */\r\nclass NumberInput {\r\n  /**\r\n   * Construct new NumberInput\r\n   *\r\n   * @param {?Object} options - The input options.\r\n   * @param {HTMLElement|String} [options.elements=\".bbj-number-masked\"] - The class name or the node to use\r\n   * @param {HTMLDocument} [options.document=document] - Document instance to use\r\n   * @param {String} [options.cssClassError=\"bbj-mask-error\"] - A css class to attach to the input when it is invalid\r\n   * @param {String} [options.cssClassSuccess=\"bbj-mask-success\"] - A css class to attach to the input when it is valid after the user interaction\r\n   * @param {Function} [options.onUpdate=null] - A callback to be called on the new masked value is set\r\n   * @param {Function} [options.onInvalid=null] - A callback to be called on the input or the mask is invalid\r\n   */\r\n  constructor(options = {}) {\r\n    this.options = {\r\n      ...{\r\n        elements: '.bbj-number-masked',\r\n        doc: document,\r\n        cssClassError: 'bbj-mask-error',\r\n        cssClassSuccess: 'bbj-mask-success',\r\n        onUpdate: null,\r\n        onInvalid: null,\r\n      },\r\n      ...options,\r\n    }\r\n\r\n    this._actualInputHandler = this._actualInputHandler.bind(this)\r\n    this._unmaskedInputHandler = this._unmaskedInputHandler.bind(this)\r\n    this.refresh()\r\n  }\r\n\r\n  /**\r\n   * Initialize the component and wrap the input elements for masking in case\r\n   * they are not wrapped yet\r\n   */\r\n  refresh() {\r\n    const elements =\r\n      typeof this.options.elements === 'string'\r\n        ? this.options.doc.querySelectorAll(this.options.elements)\r\n        : this.options.elements\r\n    let input, parentClass\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n      input = elements[i]\r\n      if (input instanceof HTMLInputElement) {\r\n        parentClass = input.parentNode.getAttribute('class')\r\n\r\n        if (!input.getAttribute('id')) {\r\n          console.warn(\r\n            `BBjMasking: Input has no ID. Without an ID the input cannot be masked`,\r\n            input\r\n          )\r\n          continue\r\n        }\r\n\r\n        // we don't initialize the input's wrap twice\r\n        const isWrapped =\r\n          parentClass && parentClass.indexOf('numberInputMask__wrap') > -1\r\n        this._wrap(input, isWrapped)\r\n      } else {\r\n        console.warn(\r\n          `BBjMasking: Invalid input element. The element will be ignored`,\r\n          input\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unwrap the input elements and remove attached listeners\r\n   */\r\n  destroy() {\r\n    const elements =\r\n      typeof this.options.elements === 'string'\r\n        ? this.options.doc.querySelectorAll(this.options.elements)\r\n        : this.options.elements\r\n\r\n    let input, parent, parentClass\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n      input = elements[i]\r\n      parent = input.parentNode\r\n      parentClass = parent.getAttribute('class')\r\n\r\n      if (parentClass && parentClass.indexOf('numberInputMask__wrap') > -1) {\r\n        this._unwrap(parent)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the number masking input wrapper\r\n   *\r\n   * @param {HTMLInputElement} actualInput the input element\r\n   * @param {Boolean} isWrapped when true the input is already wrapped and we need to add what is\r\n   *                            missing only\r\n   *\r\n   * @returns {HTMLSpanElement} wrapper instance\r\n   *\r\n   * @protected\r\n   */\r\n  _wrap(actualInput, isWrapped) {\r\n    const actualInputId = actualInput.getAttribute('id'),\r\n      actualInputName = actualInput.getAttribute('name'),\r\n      actualInputStep = actualInput.dataset.step || null,\r\n      actualInputMax = actualInput.dataset.max || null,\r\n      actualInputMin = actualInput.dataset.min || null,\r\n      actualInputGroupingSeparator =\r\n        actualInput.dataset.groupingSeparator || ',',\r\n      actualInputDecimalSeparator = actualInput.dataset.decimalSeparator || '.',\r\n      actualInputForceTrailingZeros =\r\n        actualInput.dataset.forceTrailingZeros || null,\r\n      actualInputMask = actualInput.dataset.mask || '',\r\n      actualInputClasses = actualInput.getAttribute('class'),\r\n      actualInputRequired = actualInput.getAttribute('required') || null\r\n\r\n    let wrap = null,\r\n      unmaskedInput = null\r\n\r\n    if (!isWrapped) {\r\n      wrap = this.options.doc.createElement('span')\r\n      unmaskedInput = this.options.doc.createElement('input') // hidden input with the unmasked values for forms\r\n    } else {\r\n      wrap = actualInput.parentNode\r\n      unmaskedInput = wrap.querySelector('.numberInputMask__unmaskedInput')\r\n    }\r\n\r\n    // configure the actual input\r\n    // -----------------------------------------------------\r\n    if (!isWrapped) {\r\n      actualInput.parentNode.insertBefore(wrap, actualInput) // move the input outside the wrapper\r\n      if (\r\n        !(\r\n          actualInput.hasAttribute('readonly') ||\r\n          actualInput.hasAttribute('disabled')\r\n        )\r\n      ) {\r\n        actualInput.addEventListener('click', this._actualInputHandler)\r\n        actualInput.addEventListener('focusin', this._actualInputHandler)\r\n      }\r\n    }\r\n\r\n    actualInput.dataset.valueUnmasked = actualInput.value || 0\r\n    actualInput.dataset.groupingSeparator = actualInputGroupingSeparator\r\n    actualInput.dataset.decimalSeparator = actualInputDecimalSeparator\r\n    actualInput.dataset.forceTrailingZeros = actualInputForceTrailingZeros\r\n    actualInput.value = NumberMask.mask(\r\n      actualInput.dataset.valueUnmasked,\r\n      actualInputMask,\r\n      actualInputGroupingSeparator,\r\n      actualInputDecimalSeparator,\r\n      actualInputForceTrailingZeros\r\n    ).trim()\r\n    actualInput.classList.add(\r\n      'numberInputMask__textInput',\r\n      this.options.cssClassSuccess\r\n    )\r\n\r\n    // configure the unmasked input\r\n    // ----------------------------------------------------\r\n    unmaskedInput.value = actualInput.dataset.valueUnmasked\r\n    unmaskedInput.setAttribute('aria-hidden', 'true')\r\n    unmaskedInput.setAttribute('type', 'hidden')\r\n    unmaskedInput.setAttribute('class', actualInputClasses)\r\n    if (actualInputId)\r\n      unmaskedInput.setAttribute('id', `${actualInputId}-unmasked`)\r\n    if (actualInputName)\r\n      unmaskedInput.setAttribute('name', `${actualInputName}-unmasked`)\r\n    if (actualInputRequired) unmaskedInput.setAttribute('required', 'required')\r\n\r\n    if (actualInputStep) unmaskedInput.setAttribute('step', actualInputStep)\r\n    else {\r\n      const decimals = countDecimals(unmaskedInput.value)\r\n      let step = '1'\r\n      if (decimals > 0) {\r\n        step = `.${Array(decimals).join('0')}1`\r\n      }\r\n\r\n      unmaskedInput.setAttribute('step', step)\r\n    }\r\n\r\n    if (actualInputMin) unmaskedInput.setAttribute('min', actualInputMin)\r\n    if (actualInputMax) unmaskedInput.setAttribute('max', actualInputMax)\r\n    unmaskedInput.dataset.inputId = actualInputId\r\n    unmaskedInput.dataset.mask = actualInputMask\r\n    unmaskedInput.dataset.groupingSeparator = actualInputGroupingSeparator\r\n    unmaskedInput.dataset.decimalSeparator = actualInputDecimalSeparator\r\n    if (actualInputForceTrailingZeros)\r\n      unmaskedInput.dataset.forceTrailingZeros = actualInputForceTrailingZeros\r\n\r\n    if (!isWrapped) {\r\n      unmaskedInput.classList.add('numberInputMask__unmaskedInput')\r\n      unmaskedInput.addEventListener('keyup', this._unmaskedInputHandler)\r\n      unmaskedInput.addEventListener('keypress', this._unmaskedInputHandler)\r\n      unmaskedInput.addEventListener('focusout', this._unmaskedInputHandler)\r\n\r\n      // configure the wrapper\r\n      wrap.setAttribute('class', 'numberInputMask__wrap')\r\n      wrap.appendChild(unmaskedInput)\r\n      wrap.appendChild(actualInput)\r\n    }\r\n\r\n    if (!isNaN(Number(actualInput.dataset.valueUnmasked))) {\r\n      if (this._validateInput(unmaskedInput, actualInput)) {\r\n        this.__fireOnUpdate(\r\n          actualInput.value,\r\n          actualInput.dataset.valueUnmasked,\r\n          actualInput\r\n        )\r\n      }\r\n    } else {\r\n      actualInput.classList.add(this.options.cssClassError)\r\n    }\r\n\r\n    return wrap\r\n  }\r\n\r\n  /**\r\n   * Unwrap the masked input and remove the value changed listener\r\n   *\r\n   * @param {HTMLSpanElement} textInput the wrapper span instance\r\n   *\r\n   * @protected\r\n   */\r\n  _unwrap(textInput) {\r\n    textInput.removeChild(\r\n      textInput.querySelector('.numberInputMask__unmaskedInput')\r\n    )\r\n\r\n    const input = textInput.querySelector('.numberInputMask__textInput')\r\n    input.removeEventListener('click', this._actualInputHandler)\r\n    input.removeEventListener('focusin', this._actualInputHandler)\r\n    input.classList.remove('numberInputMask__textInput')\r\n    input.classList.remove(this.options.cssClassError)\r\n    input.classList.remove(this.options.cssClassSuccess)\r\n    delete input.dataset.valueUnmasked\r\n\r\n    textInput.parentNode.insertBefore(input, textInput)\r\n    textInput.parentNode.removeChild(textInput)\r\n  }\r\n\r\n  /**\r\n   * Listen to click and focusin event on the actual input and toggle the number input\r\n   *\r\n   * @param {Event} e\r\n   *\r\n   * @protected\r\n   */\r\n  _actualInputHandler(e) {\r\n    const actualInput = e.target,\r\n      actualInputId = actualInput.id,\r\n      unmaskInput = this.options.doc.querySelector(`#${actualInputId}-unmasked`)\r\n\r\n    actualInput.setAttribute('aria-hidden', 'true')\r\n    actualInput.setAttribute('type', 'hidden')\r\n\r\n    unmaskInput.removeAttribute('aria-hidden')\r\n    unmaskInput.setAttribute('type', 'number')\r\n    this._validateInput(unmaskInput, actualInput)\r\n    setTimeout(() => {\r\n      unmaskInput.focus()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Listen to the unmasked input keypress , keyup and focusout events and check\r\n   * if the input value can be masked or not\r\n   *\r\n   * @param {Event} e\r\n   *\r\n   * @protected\r\n   */\r\n  _unmaskedInputHandler(e) {\r\n    const unmaskedInput = e.target,\r\n      type = e.type,\r\n      keyCode = e.keyCode,\r\n      mask = unmaskedInput.dataset.mask,\r\n      groupingSeparator = unmaskedInput.dataset.groupingSeparator,\r\n      decimalSeparator = unmaskedInput.dataset.decimalSeparator,\r\n      forceTrailingZeros = unmaskedInput.dataset.forceTrailingZeros,\r\n      actualInputId = unmaskedInput.dataset.inputId,\r\n      actualInput = this.options.doc.querySelector(`#${actualInputId}`)\r\n\r\n    let restore = false,\r\n      apply = false,\r\n      maskedValue = false,\r\n      isValid = this._validateInput(unmaskedInput, actualInput)\r\n\r\n    try {\r\n      maskedValue = NumberMask.mask(\r\n        unmaskedInput.value || 0,\r\n        mask,\r\n        groupingSeparator,\r\n        decimalSeparator,\r\n        forceTrailingZeros,\r\n        false\r\n      ).trim()\r\n    } catch (e) {\r\n      maskedValue = false\r\n      this.__applyCssClassState(unmaskedInput, actualInput, 'error')\r\n      this.__fireOnInvalid(e, actualInput)\r\n    }\r\n\r\n    switch (type) {\r\n      case 'keyup':\r\n        restore = (keyCode === 13 && maskedValue && isValid) || keyCode === 27\r\n        apply = keyCode === 13\r\n        break\r\n      case 'focusout':\r\n        restore = true\r\n        apply = maskedValue && isValid\r\n        break\r\n      default:\r\n        break\r\n    }\r\n\r\n    if (restore) {\r\n      unmaskedInput.classList.remove(this.options.cssClassError)\r\n      unmaskedInput.classList.remove(this.options.cssClassSuccess)\r\n\r\n      unmaskedInput.setAttribute('aria-hidden', 'true')\r\n      unmaskedInput.setAttribute('type', 'hidden')\r\n\r\n      actualInput.removeAttribute('aria-hidden')\r\n      actualInput.setAttribute('type', 'text')\r\n\r\n      actualInput.classList.add(this.options.cssClassSuccess)\r\n\r\n      if (apply && maskedValue && isValid) {\r\n        actualInput.value = maskedValue\r\n        actualInput.dataset.valueUnmasked = unmaskedInput.value\r\n        this.__fireOnUpdate(maskedValue, unmaskedInput.value, actualInput)\r\n      } else {\r\n        unmaskedInput.value = actualInput.dataset.valueUnmasked\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger `checkValidity` on the input\r\n   *\r\n   * @param {HTMLInputElement} unmaskedInput\r\n   * @param {HTMLInputElement} actualInput\r\n   *\r\n   * @returns {Boolean} true when valid , false otherwise\r\n   *\r\n   * @protected\r\n   */\r\n  _validateInput(unmaskedInput, actualInput) {\r\n    let isValid = true\r\n    const value = Number(unmaskedInput.value)\r\n    if (unmaskedInput.getAttribute('type') === 'hidden' && !isNaN(value)) {\r\n      const max = unmaskedInput.getAttribute('max')\r\n      const min = unmaskedInput.getAttribute('min')\r\n      const step = unmaskedInput.getAttribute('step')\r\n\r\n      if (min) isValid = isValid && value >= Number(min)\r\n      if (max) isValid = isValid && value <= Number(max)\r\n\r\n      if (step)\r\n        isValid =\r\n          isValid && countDecimals(step) === countDecimals(unmaskedInput.value)\r\n    } else isValid = unmaskedInput.checkValidity()\r\n\r\n    if (isValid) {\r\n      this.__applyCssClassState(unmaskedInput, actualInput, 'success')\r\n    } else {\r\n      this.__applyCssClassState(unmaskedInput, actualInput, 'error')\r\n      this.__fireOnInvalid('Validity check fails', actualInput)\r\n    }\r\n\r\n    return isValid\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __fireOnUpdate(valueMasked, valueUnmasked, input) {\r\n    if (this.options.onUpdate) {\r\n      this.options.onUpdate(valueMasked, valueUnmasked, input)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __fireOnInvalid(error, input) {\r\n    if (this.options.onInvalid) {\r\n      this.options.onInvalid(error, input)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __applyCssClassState(unmaskedInput, actualInput, state) {\r\n    if (\r\n      actualInput.hasAttribute('readonly') ||\r\n      actualInput.hasAttribute('disabled')\r\n    ) {\r\n      actualInput.classList.remove(this.options.cssClassError)\r\n      actualInput.classList.remove(this.options.cssClassSuccess)\r\n\r\n      unmaskedInput.classList.remove(this.options.cssClassError)\r\n      unmaskedInput.classList.remove(this.options.cssClassSuccess)\r\n    } else {\r\n      if (state === 'success') {\r\n        actualInput.classList.remove(this.options.cssClassError)\r\n        actualInput.classList.add(this.options.cssClassSuccess)\r\n\r\n        unmaskedInput.classList.remove(this.options.cssClassError)\r\n        unmaskedInput.classList.add(this.options.cssClassSuccess)\r\n      }\r\n\r\n      if (state === 'error') {\r\n        actualInput.classList.add(this.options.cssClassError)\r\n        actualInput.classList.remove(this.options.cssClassSuccess)\r\n\r\n        unmaskedInput.classList.add(this.options.cssClassError)\r\n        unmaskedInput.classList.remove(this.options.cssClassSuccess)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default NumberInput\r\n",
    "static": true,
    "longname": "D:/Github/bbj-input-masking/src/NumberInput/NumberInput.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "countDecimals",
    "memberof": "src/NumberInput/NumberInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/NumberInput/NumberInput.js~countDecimals",
    "access": "public",
    "export": false,
    "importPath": "basis-input-masking/src/NumberInput/NumberInput.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "NumberInput",
    "memberof": "src/NumberInput/NumberInput.js",
    "static": true,
    "longname": "src/NumberInput/NumberInput.js~NumberInput",
    "access": "public",
    "export": true,
    "importPath": "basis-input-masking/src/NumberInput/NumberInput.js",
    "importStyle": "NumberInput",
    "description": "The `NumberInput` will wrap text inputs and apply the given [bbj Number mask](https://github.com/BasisHub/bbj-masks#number-masks)\n\n**Options**\n\n_Options can be passed via data attributes . For data attributes, append the option name to data-, as in data-mask_\n\n| Option    | Default | Description                                                                                             |\n|-----------|---------|---------------------------------------------------------------------------------------------------------|\n| mask |         | The bbj number mask @see [BBj Number Masks](https://github.com/BasisHub/bbj-masks#number-masks) |\n| min |         | The maximum value to accept for this input|\n| max |         | The minimum value to accept for this input|\n| step |         | A stepping interval to use when using up and down arrows to adjust the value, as well as for validation|\n|grouping-separator | , | a char which will be used as a grouping separator |\n|decimal-separator | . | a char which will be used as a decimal separator |\n|force-trailing-zeros | false | Affects the output by switching the way a mask with \"#\" characters in the trailing positions is filled. for example, the function NumberMask.mask(.10:\"#.##\") returns .10 instead of .1|\n\n <br>\n\n**Example :**\n```html\n <input class=\"bbj-number-masked\" name=\"test\" id=\"test\" value=\"1234\" data-mask=\"##,##0\">\n\n <script>\n   document.addEventListener('DOMContentLoaded', function (e) {\n     new Basis.InputMasking.NumberInput({\n        onUpdate: (maskedValue , rawValue , input) => {\n           // do something\n        },\n        onInvalid: (err , input) => {\n           // do something\n        }\n     })\n   })\n </script>\n```",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Hyyan Abo Fakher <habofakher@basis.com>"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/NumberInput/NumberInput.js~NumberInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/NumberInput/NumberInput.js~NumberInput#constructor",
    "access": "public",
    "description": "Construct new NumberInput",
    "lineNumber": 70,
    "params": [
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The input options."
      },
      {
        "nullable": null,
        "types": [
          "HTMLElement",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\".bbj-number-masked\"",
        "defaultRaw": ".bbj-number-masked",
        "name": "options.elements",
        "description": "The class name or the node to use"
      },
      {
        "nullable": null,
        "types": [
          "HTMLDocument"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "document",
        "defaultRaw": "document",
        "name": "options.document",
        "description": "Document instance to use"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"bbj-mask-error\"",
        "defaultRaw": "bbj-mask-error",
        "name": "options.cssClassError",
        "description": "A css class to attach to the input when it is invalid"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"bbj-mask-success\"",
        "defaultRaw": "bbj-mask-success",
        "name": "options.cssClassSuccess",
        "description": "A css class to attach to the input when it is valid after the user interaction"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "options.onUpdate",
        "description": "A callback to be called on the new masked value is set"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "options.onInvalid",
        "description": "A callback to be called on the input or the mask is invalid"
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "options",
    "memberof": "src/NumberInput/NumberInput.js~NumberInput",
    "static": false,
    "longname": "src/NumberInput/NumberInput.js~NumberInput#options",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "{...undefined: Object, ...options: Object}"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "refresh",
    "memberof": "src/NumberInput/NumberInput.js~NumberInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/NumberInput/NumberInput.js~NumberInput#refresh",
    "access": "public",
    "description": "Initialize the component and wrap the input elements for masking in case\nthey are not wrapped yet",
    "lineNumber": 92,
    "params": [],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/NumberInput/NumberInput.js~NumberInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/NumberInput/NumberInput.js~NumberInput#destroy",
    "access": "public",
    "description": "Unwrap the input elements and remove attached listeners",
    "lineNumber": 128,
    "params": [],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "_wrap",
    "memberof": "src/NumberInput/NumberInput.js~NumberInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/NumberInput/NumberInput.js~NumberInput#_wrap",
    "access": "protected",
    "description": "Create the number masking input wrapper",
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLSpanElement} wrapper instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "actualInput",
        "description": "the input element"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isWrapped",
        "description": "when true the input is already wrapped and we need to add what is\n                           missing only"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLSpanElement"
      ],
      "spread": false,
      "description": "wrapper instance"
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "_unwrap",
    "memberof": "src/NumberInput/NumberInput.js~NumberInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/NumberInput/NumberInput.js~NumberInput#_unwrap",
    "access": "protected",
    "description": "Unwrap the masked input and remove the value changed listener",
    "lineNumber": 281,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLSpanElement"
        ],
        "spread": false,
        "optional": false,
        "name": "textInput",
        "description": "the wrapper span instance"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "_actualInputHandler",
    "memberof": "src/NumberInput/NumberInput.js~NumberInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/NumberInput/NumberInput.js~NumberInput#_actualInputHandler",
    "access": "protected",
    "description": "Listen to click and focusin event on the actual input and toggle the number input",
    "lineNumber": 305,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "_unmaskedInputHandler",
    "memberof": "src/NumberInput/NumberInput.js~NumberInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/NumberInput/NumberInput.js~NumberInput#_unmaskedInputHandler",
    "access": "protected",
    "description": "Listen to the unmasked input keypress , keyup and focusout events and check\nif the input value can be masked or not",
    "lineNumber": 329,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "_validateInput",
    "memberof": "src/NumberInput/NumberInput.js~NumberInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/NumberInput/NumberInput.js~NumberInput#_validateInput",
    "access": "protected",
    "description": "Trigger `checkValidity` on the input",
    "lineNumber": 405,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} true when valid , false otherwise"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "unmaskedInput",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "actualInput",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true when valid , false otherwise"
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "__fireOnUpdate",
    "memberof": "src/NumberInput/NumberInput.js~NumberInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/NumberInput/NumberInput.js~NumberInput#__fireOnUpdate",
    "access": "private",
    "description": "",
    "lineNumber": 434,
    "ignore": true,
    "params": [
      {
        "name": "valueMasked",
        "types": [
          "*"
        ]
      },
      {
        "name": "valueUnmasked",
        "types": [
          "*"
        ]
      },
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "__fireOnInvalid",
    "memberof": "src/NumberInput/NumberInput.js~NumberInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/NumberInput/NumberInput.js~NumberInput#__fireOnInvalid",
    "access": "private",
    "description": "",
    "lineNumber": 443,
    "ignore": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "__applyCssClassState",
    "memberof": "src/NumberInput/NumberInput.js~NumberInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/NumberInput/NumberInput.js~NumberInput#__applyCssClassState",
    "access": "private",
    "description": "",
    "lineNumber": 452,
    "ignore": true,
    "params": [
      {
        "name": "unmaskedInput",
        "types": [
          "*"
        ]
      },
      {
        "name": "actualInput",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/TextInput/index.js",
    "content": "/*\r\n * This file is part of basis-input-masking lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nimport TextInput from './TextInput'\r\n\r\nexport default TextInput\r\n",
    "static": true,
    "longname": "D:/Github/bbj-input-masking/src/TextInput/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/TextInput/TextInput.js",
    "content": "/*\r\n * This file is part of basis-input-masking lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nimport StringMask from 'bbj-masks/src/StringMask'\r\nimport {\r\n  maskIfNotMasked,\r\n  unmask,\r\n  findCaretPosition,\r\n  generatePatternFromMask,\r\n} from './tools.js'\r\n\r\n/**\r\n * The `TextInput` will wrap text inputs and apply the given [bbj string mask](https://github.com/BasisHub/bbj-masks#string-masks)\r\n *\r\n * **Options**\r\n *\r\n * _Options can be passed via data attributes . For data attributes, append the option name to data-, as in data-mask_\r\n *\r\n * | Option    | Default | Description                                                                                             |\r\n * |-----------|---------|---------------------------------------------------------------------------------------------------------|\r\n * | mask |         | The bbj string mask @see [BBj String Masks](https://github.com/BasisHub/bbj-masks#string-masks) |\r\n *\r\n *  <br>\r\n *\r\n * **Example :**\r\n * ```html\r\n *  <input class=\"bbj-text-masked\" name=\"test\" id=\"test\" value=\"ed23\" data-mask=\"AA-00\">\r\n *\r\n *  <script>\r\n *    document.addEventListener('DOMContentLoaded', function (e) {\r\n *      new Basis.InputMasking.TextInput({\r\n *         onUpdate: (maskedValue , rawValue , input) => {\r\n *            // do something\r\n *         },\r\n *         onInvalid: (err , input) => {\r\n *            // do something\r\n *         }\r\n *      })\r\n *    })\r\n *  </script>\r\n * ```\r\n *\r\n * @author Hyyan Abo Fakher <habofakher@basis.com>\r\n */\r\nclass TextInput {\r\n  /**\r\n   * Construct new TextInput\r\n   *\r\n   * @param {?Object} options - The input options.\r\n   * @param {HTMLElement|String} [options.elements=\".bbj-text-masked\"] - The class name or the node to use\r\n   * @param {HTMLDocument} [options.document=document] - Document instance to use\r\n   * @param {String} [options.cssClassError=\"bbj-mask-error\"] - A css class to attach to the input when it is invalid\r\n   * @param {String} [options.cssClassSuccess=\"bbj-mask-success\"] - A css class to attach to the input when it is valid after the user interaction\r\n   * @param {Function} [options.onUpdate=null] - A callback to be called on the new masked value is set\r\n   * @param {Function} [options.onInvalid=null] - A callback to be called on the input or the mask is invalid\r\n   */\r\n  constructor(options = {}) {\r\n    this.options = {\r\n      ...{\r\n        elements: '.bbj-text-masked',\r\n        doc: document,\r\n        cssClassError: 'bbj-mask-error',\r\n        cssClassSuccess: 'bbj-mask-success',\r\n        onUpdate: null,\r\n        onInvalid: null,\r\n      },\r\n      ...options,\r\n    }\r\n    this._onKeystroke = this._onKeystroke.bind(this)\r\n    this._onFocus = this._onFocus.bind(this)\r\n    this.refresh()\r\n  }\r\n\r\n  /**\r\n   * Initialize the component and wrap the input elements for masking in case\r\n   * they are not wrapped yet\r\n   */\r\n  refresh() {\r\n    const elements =\r\n      typeof this.options.elements === 'string'\r\n        ? this.options.doc.querySelectorAll(this.options.elements)\r\n        : this.options.elements\r\n    let input, parentClass\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n      input = elements[i]\r\n      if (input instanceof HTMLInputElement) {\r\n        parentClass = input.parentNode.getAttribute('class')\r\n\r\n        if (!input.getAttribute('id')) {\r\n          console.warn(\r\n            `BBjMasking: Input has no ID. Without an ID the input cannot be masked`,\r\n            input\r\n          )\r\n          continue\r\n        }\r\n\r\n        // we don't initialize the input's wrap twice\r\n        const isWrapped =\r\n          parentClass && parentClass.indexOf('textInputMask__wrap') > -1\r\n        this._wrap(input, isWrapped)\r\n      } else {\r\n        console.warn(\r\n          `BBjMasking: Invalid input element. The element will be ignored`,\r\n          input\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unwrap the input elements and remove attached listeners\r\n   */\r\n  destroy() {\r\n    const elements =\r\n      typeof this.options.elements === 'string'\r\n        ? this.options.doc.querySelectorAll(this.options.elements)\r\n        : this.options.elements\r\n\r\n    let input, parent, parentClass\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n      input = elements[i]\r\n      parent = input.parentNode\r\n      parentClass = parent.getAttribute('class')\r\n\r\n      if (parentClass && parentClass.indexOf('textInputMask__wrap') > -1) {\r\n        this._unwrap(parent)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the text masking input wrapper\r\n   *\r\n   * @param {HTMLInputElement} input the input element\r\n   * @param {Boolean} isWrapped when true the input is already wrapped and we need to add what is\r\n   *                            missing only\r\n   *\r\n   * @returns {HTMLSpanElement} the wrap element\r\n   *\r\n   * @protected\r\n   */\r\n  _wrap(input, isWrapped) {\r\n    const inputId = input.getAttribute('id'),\r\n      inputName = input.getAttribute('name'),\r\n      mask = input.dataset.mask || '',\r\n      originalPattern = input.pattern,\r\n      defaultPattern = generatePatternFromMask(mask),\r\n      pattern = originalPattern || defaultPattern\r\n\r\n    let wrap = null,\r\n      unmaskInput = null\r\n\r\n    if (!isWrapped) {\r\n      wrap = this.options.doc.createElement('span')\r\n      unmaskInput = this.options.doc.createElement('input') // hidden input with the unmasked values for forms\r\n    } else {\r\n      wrap = input.parentNode\r\n      unmaskInput = wrap.querySelector('.textInputMask__unmaskedInput')\r\n    }\r\n\r\n    // configure the actual input\r\n    // -----------------------------------------------------\r\n    input.value = maskIfNotMasked(input.value, mask)\r\n    input.pattern = pattern\r\n    input.classList.add('textInputMask__textInput')\r\n    input.dataset.mask = mask\r\n    input.dataset.valueUnmasked = unmask(input.value, mask)\r\n    if (originalPattern && originalPattern !== defaultPattern) {\r\n      input.dataset.isCustomPattern = true\r\n    }\r\n\r\n    if (!isWrapped) {\r\n      if (!(input.hasAttribute('readonly') || input.hasAttribute('disable'))) {\r\n        input.addEventListener('keyup', this._onKeystroke)\r\n        input.addEventListener('keypress', this._onKeystroke)\r\n        input.addEventListener('paste', this._onKeystroke)\r\n        input.addEventListener('focusin', this._onFocus)\r\n        input.addEventListener('click', this._onFocus)\r\n      }\r\n      input.parentNode.insertBefore(wrap, input) // move the input outside the wrapper\r\n    }\r\n\r\n    if (this._validateInput(input)) {\r\n      this.__fireOnUpdate(input.value, input.dataset.valueUnmasked, input)\r\n    }\r\n\r\n    // configure the unmasked input\r\n    // ----------------------------------------------------\r\n    unmaskInput.setAttribute('aria-hidden', 'true')\r\n    unmaskInput.setAttribute('type', 'hidden')\r\n    unmaskInput.classList.add('textInputMask__unmaskedInput')\r\n    unmaskInput.value = input.dataset.valueUnmasked\r\n    if (inputId) unmaskInput.setAttribute('id', `${inputId}-unmasked`)\r\n    if (inputName) unmaskInput.setAttribute('name', `${inputName}-unmasked`)\r\n\r\n    if (!isWrapped) {\r\n      // configure the wrapper\r\n      wrap.setAttribute('class', 'textInputMask__wrap')\r\n      wrap.appendChild(unmaskInput)\r\n      wrap.appendChild(input)\r\n    }\r\n\r\n    return wrap\r\n  }\r\n\r\n  /**\r\n   * Unwrap the masked input and remove the value changed listener\r\n   *\r\n   * @param {HTMLSpanElement} textInput the wrapper span instance\r\n   *\r\n   * @protected\r\n   */\r\n  _unwrap(textInput) {\r\n    textInput.removeChild(\r\n      textInput.querySelector('.textInputMask__unmaskedInput')\r\n    )\r\n\r\n    const input = textInput.querySelector('.textInputMask__textInput')\r\n    input.removeEventListener('keyup', this._onKeystroke)\r\n    input.removeEventListener('keypress', this._onKeystroke)\r\n    input.removeEventListener('paste', this._onKeystroke)\r\n    input.removeEventListener('focusin', this._onFocus)\r\n    input.removeEventListener('click', this._onFocus)\r\n    delete input.dataset.valueUnmasked\r\n    if (!input.dataset.isCustomPattern) {\r\n      input.removeAttribute('pattern')\r\n      delete input.dataset.isCustomPattern\r\n    }\r\n\r\n    input.classList.remove(this.options.cssClassError)\r\n\r\n    textInput.parentNode.insertBefore(input, textInput)\r\n    textInput.parentNode.removeChild(textInput)\r\n  }\r\n\r\n  /**\r\n   * Listen to every keystroke on the input and update the masked and the unmasked value\r\n   *\r\n   * @param {Event} e\r\n   *\r\n   * @protected\r\n   */\r\n  _onKeystroke(e) {\r\n    if (e.ctrlKey || e.shiftKey || e.altKey || e.metaKey) return\r\n    e.preventDefault()\r\n\r\n    const input = e.target,\r\n      mask = input.dataset.mask || this.options.mask,\r\n      eventType = e.type\r\n\r\n    input.classList.remove(this.options.cssClassError)\r\n    input.classList.remove(this.options.cssClassSuccess)\r\n\r\n    let value = input.value,\r\n      keyCode = e.keyCode,\r\n      key = e.key ? (e.key.length > 1 ? '' : e.key) : '',\r\n      insertPosition = findCaretPosition(value, mask),\r\n      newValue,\r\n      unmaskedValue,\r\n      maskError = false\r\n\r\n    switch (eventType) {\r\n      case 'paste':\r\n        newValue = maskIfNotMasked(\r\n          (e.clipboardData || window.clipboardData).getData('Text'),\r\n          mask\r\n        )\r\n        break\r\n      case 'keyup':\r\n        newValue = value\r\n        break\r\n      case 'keypress':\r\n        const selectionStart = input.selectionStart\r\n        if (selectionStart !== insertPosition) insertPosition = selectionStart\r\n\r\n        newValue =\r\n          value.substr(0, insertPosition) + key + value.substr(insertPosition)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n\r\n    unmaskedValue = unmask(newValue, mask)\r\n\r\n    if ([35, 36, 37, 38, 39, 40].indexOf(keyCode) === -1) {\r\n      try {\r\n        input.value = StringMask.mask(unmaskedValue, mask, false)\r\n        input.dataset.valueUnmasked = unmaskedValue\r\n        this.options.doc.querySelector(\r\n          `#${input.getAttribute('id')}-unmasked`\r\n        ).value = unmaskedValue\r\n        this.__applyCssClassState(input, 'success')\r\n        this.__fireOnUpdate(input.value, unmaskedValue, input)\r\n        maskError = false\r\n      } catch (error) {\r\n        this.__applyCssClassState(input, 'error')\r\n        this.__fireOnInvalid(error, input)\r\n        maskError = true\r\n      }\r\n\r\n      this._updateCaretPosition(input, mask)\r\n    }\r\n\r\n    if (!maskError) this._validateInput(input)\r\n  }\r\n\r\n  /**\r\n   * Listen to focus events on the input and update the caret position\r\n   * where the next char should be inserted according to the mask\r\n   *\r\n   * @param {FocusEvent} e\r\n   *\r\n   * @protected\r\n   */\r\n  _onFocus(e) {\r\n    const input = e.target\r\n    const mask = input.dataset.mask || this.options.mask\r\n    this._updateCaretPosition(input, mask)\r\n  }\r\n\r\n  /**\r\n   * Update the caret position on the input based on the given mask\r\n   *\r\n   * @param {HTMLInputElement} input instance\r\n   * @param {String} mask  bbj string\r\n   *\r\n   * @protected\r\n   */\r\n  _updateCaretPosition(input, mask) {\r\n    setTimeout(() => {\r\n      const position = findCaretPosition(input.value, mask)\r\n      input.setSelectionRange(position, position)\r\n    }, 0)\r\n  }\r\n\r\n  /**\r\n   * Trigger `checkValidity` on the input\r\n   *\r\n   * @param {HTMLInputElement} input\r\n   *\r\n   * @returns {Boolean} true when valid , false otherwise\r\n   *\r\n   * @protected\r\n   */\r\n  _validateInput(input) {\r\n    const isValid = input.checkValidity()\r\n\r\n    if (isValid) {\r\n      this.__applyCssClassState(input, 'success')\r\n    } else {\r\n      this.__applyCssClassState(input, 'error')\r\n      this.__fireOnInvalid('Validity check fails', input)\r\n    }\r\n\r\n    return isValid\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __fireOnUpdate(valueMasked, valueUnmasked, input) {\r\n    if (this.options.onUpdate) {\r\n      this.options.onUpdate(valueMasked, valueUnmasked, input)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __fireOnInvalid(error, input) {\r\n    if (this.options.onInvalid) {\r\n      this.options.onInvalid(error, input)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  __applyCssClassState(input, state) {\r\n    if (input.hasAttribute('readonly') || input.hasAttribute('disabled')) {\r\n      input.classList.remove(this.options.cssClassError)\r\n      input.classList.remove(this.options.cssClassSuccess)\r\n    } else {\r\n      if (state === 'success') {\r\n        input.classList.remove(this.options.cssClassError)\r\n        input.classList.add(this.options.cssClassSuccess)\r\n      }\r\n\r\n      if (state === 'error') {\r\n        input.classList.add(this.options.cssClassError)\r\n        input.classList.remove(this.options.cssClassSuccess)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default TextInput\r\n",
    "static": true,
    "longname": "D:/Github/bbj-input-masking/src/TextInput/TextInput.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "class",
    "name": "TextInput",
    "memberof": "src/TextInput/TextInput.js",
    "static": true,
    "longname": "src/TextInput/TextInput.js~TextInput",
    "access": "public",
    "export": true,
    "importPath": "basis-input-masking/src/TextInput/TextInput.js",
    "importStyle": "TextInput",
    "description": "The `TextInput` will wrap text inputs and apply the given [bbj string mask](https://github.com/BasisHub/bbj-masks#string-masks)\n\n**Options**\n\n_Options can be passed via data attributes . For data attributes, append the option name to data-, as in data-mask_\n\n| Option    | Default | Description                                                                                             |\n|-----------|---------|---------------------------------------------------------------------------------------------------------|\n| mask |         | The bbj string mask @see [BBj String Masks](https://github.com/BasisHub/bbj-masks#string-masks) |\n\n <br>\n\n**Example :**\n```html\n <input class=\"bbj-text-masked\" name=\"test\" id=\"test\" value=\"ed23\" data-mask=\"AA-00\">\n\n <script>\n   document.addEventListener('DOMContentLoaded', function (e) {\n     new Basis.InputMasking.TextInput({\n        onUpdate: (maskedValue , rawValue , input) => {\n           // do something\n        },\n        onInvalid: (err , input) => {\n           // do something\n        }\n     })\n   })\n </script>\n```",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Hyyan Abo Fakher <habofakher@basis.com>"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 70,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/TextInput/TextInput.js~TextInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TextInput/TextInput.js~TextInput#constructor",
    "access": "public",
    "description": "Construct new TextInput",
    "lineNumber": 62,
    "params": [
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The input options."
      },
      {
        "nullable": null,
        "types": [
          "HTMLElement",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\".bbj-text-masked\"",
        "defaultRaw": ".bbj-text-masked",
        "name": "options.elements",
        "description": "The class name or the node to use"
      },
      {
        "nullable": null,
        "types": [
          "HTMLDocument"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "document",
        "defaultRaw": "document",
        "name": "options.document",
        "description": "Document instance to use"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"bbj-mask-error\"",
        "defaultRaw": "bbj-mask-error",
        "name": "options.cssClassError",
        "description": "A css class to attach to the input when it is invalid"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"bbj-mask-success\"",
        "defaultRaw": "bbj-mask-success",
        "name": "options.cssClassSuccess",
        "description": "A css class to attach to the input when it is valid after the user interaction"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "options.onUpdate",
        "description": "A callback to be called on the new masked value is set"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "options.onInvalid",
        "description": "A callback to be called on the input or the mask is invalid"
      }
    ]
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "options",
    "memberof": "src/TextInput/TextInput.js~TextInput",
    "static": false,
    "longname": "src/TextInput/TextInput.js~TextInput#options",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "{...undefined: Object, ...options: Object}"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "refresh",
    "memberof": "src/TextInput/TextInput.js~TextInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TextInput/TextInput.js~TextInput#refresh",
    "access": "public",
    "description": "Initialize the component and wrap the input elements for masking in case\nthey are not wrapped yet",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/TextInput/TextInput.js~TextInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TextInput/TextInput.js~TextInput#destroy",
    "access": "public",
    "description": "Unwrap the input elements and remove attached listeners",
    "lineNumber": 119,
    "params": [],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "_wrap",
    "memberof": "src/TextInput/TextInput.js~TextInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TextInput/TextInput.js~TextInput#_wrap",
    "access": "protected",
    "description": "Create the text masking input wrapper",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLSpanElement} the wrap element"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "the input element"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isWrapped",
        "description": "when true the input is already wrapped and we need to add what is\n                           missing only"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLSpanElement"
      ],
      "spread": false,
      "description": "the wrap element"
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "_unwrap",
    "memberof": "src/TextInput/TextInput.js~TextInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TextInput/TextInput.js~TextInput#_unwrap",
    "access": "protected",
    "description": "Unwrap the masked input and remove the value changed listener",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLSpanElement"
        ],
        "spread": false,
        "optional": false,
        "name": "textInput",
        "description": "the wrapper span instance"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "_onKeystroke",
    "memberof": "src/TextInput/TextInput.js~TextInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TextInput/TextInput.js~TextInput#_onKeystroke",
    "access": "protected",
    "description": "Listen to every keystroke on the input and update the masked and the unmasked value",
    "lineNumber": 250,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "_onFocus",
    "memberof": "src/TextInput/TextInput.js~TextInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TextInput/TextInput.js~TextInput#_onFocus",
    "access": "protected",
    "description": "Listen to focus events on the input and update the caret position\nwhere the next char should be inserted according to the mask",
    "lineNumber": 322,
    "params": [
      {
        "nullable": null,
        "types": [
          "FocusEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "_updateCaretPosition",
    "memberof": "src/TextInput/TextInput.js~TextInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TextInput/TextInput.js~TextInput#_updateCaretPosition",
    "access": "protected",
    "description": "Update the caret position on the input based on the given mask",
    "lineNumber": 336,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "instance"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "bbj string"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "_validateInput",
    "memberof": "src/TextInput/TextInput.js~TextInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TextInput/TextInput.js~TextInput#_validateInput",
    "access": "protected",
    "description": "Trigger `checkValidity` on the input",
    "lineNumber": 352,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} true when valid , false otherwise"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLInputElement"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true when valid , false otherwise"
    },
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "__fireOnUpdate",
    "memberof": "src/TextInput/TextInput.js~TextInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TextInput/TextInput.js~TextInput#__fireOnUpdate",
    "access": "private",
    "description": "",
    "lineNumber": 368,
    "ignore": true,
    "params": [
      {
        "name": "valueMasked",
        "types": [
          "*"
        ]
      },
      {
        "name": "valueUnmasked",
        "types": [
          "*"
        ]
      },
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "__fireOnInvalid",
    "memberof": "src/TextInput/TextInput.js~TextInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TextInput/TextInput.js~TextInput#__fireOnInvalid",
    "access": "private",
    "description": "",
    "lineNumber": 377,
    "ignore": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "__applyCssClassState",
    "memberof": "src/TextInput/TextInput.js~TextInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TextInput/TextInput.js~TextInput#__applyCssClassState",
    "access": "private",
    "description": "",
    "lineNumber": 386,
    "ignore": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/TextInput/tools.js",
    "content": "/*\r\n * This file is part of basis-input-masking lib.\r\n * (c) Basis Europe <eu@basis.com>\r\n *\r\n * For the full copyright and license information, please view the LICENSE\r\n * file that was distributed with this source code.\r\n */\r\n\r\nimport StringMask from 'bbj-masks/src/StringMask'\r\nimport 'core-js/stable/array/fill'\r\n\r\nconst SUPPORTED_MASKS = ['X', 'a', 'A', '0', 'z', 'Z', 'U']\r\n/**\r\n * When true , then the browser supports Unicode Property Escapes\r\n * otherwise it is false \r\n * \r\n * {@link https://github.com/tc39/proposal-regexp-unicode-property-escapes}\r\n */\r\nlet IS_UNICODE_PROPERTY_SUPPORTED = false\r\ntry {\r\n  eval('/\\\\p{L}/u')\r\n  IS_UNICODE_PROPERTY_SUPPORTED = true\r\n} catch (err) {\r\n  IS_UNICODE_PROPERTY_SUPPORTED = false\r\n}\r\n\r\n/**\r\n * Check if the given value is masked with the given mask or not\r\n *\r\n * @param {String} value masked or unmasked value\r\n * @param {String} mask  a bbj mask\r\n *\r\n * @return {Boolean} true when the value is masked with given mask , false otherwise\r\n */\r\nconst isMaskedValue = (value, mask) => {\r\n  if (typeof isMaskedValue.__CACHE__ === 'undefined') {\r\n    isMaskedValue.__CACHE__ = {}\r\n  }\r\n\r\n  const cacheKey = `${value}-${mask}`\r\n\r\n  if (!isMaskedValue.__CACHE__[cacheKey]) {\r\n    const unmaskedValue = unmask(value, mask)\r\n    isMaskedValue.__CACHE__[cacheKey] =\r\n      value === StringMask.mask(unmaskedValue, mask)\r\n  }\r\n\r\n  return isMaskedValue.__CACHE__[cacheKey]\r\n}\r\n\r\n/**\r\n * Mask the given value with the given mask in case the value is not already masked with the\r\n * given mask\r\n *\r\n * @param {String} value masked or unmasked value\r\n * @param {String} mask  a bbj mask\r\n *\r\n * @return {String} a masked value\r\n */\r\nconst maskIfNotMasked = (value, mask) => {\r\n  if (typeof maskIfNotMasked.__CACHE__ === 'undefined') {\r\n    maskIfNotMasked.__CACHE__ = {}\r\n  }\r\n\r\n  const cacheKey = `${value}-${mask}`\r\n\r\n  if (!maskIfNotMasked.__CACHE__[cacheKey]) {\r\n    if (isMaskedValue(value, mask)) {\r\n      maskIfNotMasked.__CACHE__[cacheKey] = value\r\n    } else {\r\n      try {\r\n        maskIfNotMasked.__CACHE__[cacheKey] = StringMask.mask(\r\n          value,\r\n          mask,\r\n          false\r\n        )\r\n      } catch (e) {\r\n        maskIfNotMasked.__CACHE__[cacheKey] = StringMask.mask('', mask)\r\n      }\r\n    }\r\n  }\r\n\r\n  return maskIfNotMasked.__CACHE__[cacheKey]\r\n}\r\n\r\n/**\r\n * Generate a regex patter based on the give task\r\n *\r\n * @param {String} mask  bbj string mask\r\n *\r\n * @return {String} regex for the give mask\r\n */\r\nconst generatePatternFromMask = mask => {\r\n  if (typeof generatePatternFromMask.__CACHE__ === 'undefined') {\r\n    generatePatternFromMask.__CACHE__ = {}\r\n  }\r\n\r\n  const cacheKey = mask\r\n\r\n  if (!generatePatternFromMask.__CACHE__[cacheKey]) {\r\n    const maskAsArry = mask.split('')\r\n    let regex = ''\r\n    maskAsArry.forEach(c => {\r\n      switch (c) {\r\n        case 'X':\r\n          regex += '([^ -~])'\r\n          break\r\n        case 'a':\r\n        case 'A':\r\n          // https://mothereff.in/regexpu#input=var+regex+%3D+/%5Cp%7BL%7D/u%3B&unicodePropertyEscape=1\r\n          // https://stackoverflow.com/questions/150033/regular-expression-to-match-non-ascii-characters#answer-48902765\r\n          regex += IS_UNICODE_PROPERTY_SUPPORTED\r\n            ? '\\\\p{L}'\r\n            : '((?:[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDEC0-\\uDEEB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]))'\r\n          break\r\n        case '0':\r\n          regex += '([0-9])'\r\n          break\r\n        case 'z':\r\n        case 'Z':\r\n          regex += IS_UNICODE_PROPERTY_SUPPORTED\r\n            ? '([0-9]|\\\\p{L})'\r\n            : '([0-9]|(?:[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDEC0-\\uDEEB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]))'\r\n          break\r\n        case 'U':\r\n          regex += IS_UNICODE_PROPERTY_SUPPORTED\r\n            ? '(([0-9])|(\\\\s)|([.,/#!$%^&*;:{}=-_`~()])|(\\\\p{L}))'\r\n            : '(([0-9])|(\\\\s)|([.,/#!$%^&*;:{}=-_`~()])|(?:[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDEC0-\\uDEEB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]))'\r\n          break\r\n        default:\r\n          regex += c.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\r\n          break\r\n      }\r\n    })\r\n\r\n    generatePatternFromMask.__CACHE__[cacheKey] = regex\r\n  }\r\n\r\n  return generatePatternFromMask.__CACHE__[cacheKey]\r\n}\r\n\r\n/**\r\n * Unmask the given value\r\n *\r\n * @param {String} maskedValue masked string\r\n * @param {String} mask  the used mask to produce the masked string\r\n */\r\nconst unmask = (maskedValue, mask) => {\r\n  if (typeof unmask.__CACHE__ === 'undefined') {\r\n    unmask.__CACHE__ = {}\r\n  }\r\n\r\n  const cacheKey = `${maskedValue}-${mask}`\r\n\r\n  if (!unmask.__CACHE__[cacheKey]) {\r\n    const maskAsArray = mask.split('')\r\n    const maskedValueAsArray = maskedValue.split('')\r\n\r\n    let unmasked = ''\r\n\r\n    for (let index = 0; index < maskedValueAsArray.length; index++) {\r\n      const el = maskedValueAsArray[index]\r\n      const mask = maskAsArray[index]\r\n      const elHasMask = SUPPORTED_MASKS.indexOf(mask) > -1\r\n      if (elHasMask) {\r\n        const pattern = new RegExp(\r\n          generatePatternFromMask(mask),\r\n          IS_UNICODE_PROPERTY_SUPPORTED ? 'u' : ''\r\n        )\r\n        if (pattern.test(el)) unmasked += el\r\n        else break\r\n      }\r\n    }\r\n\r\n    unmask.__CACHE__[cacheKey] = unmasked.toLocaleLowerCase()\r\n  }\r\n\r\n  return unmask.__CACHE__[cacheKey]\r\n}\r\n\r\n/**\r\n * Given the masked string , find the next caret position depending on\r\n * what is missing to complete the mask\r\n *\r\n * @param {String} maskedValue masked string\r\n * @param {String} mask  the used mask to produce the masked string\r\n */\r\nconst findCaretPosition = (maskedValue, mask) => {\r\n  if (typeof findCaretPosition.__CACHE__ === 'undefined') {\r\n    findCaretPosition.__CACHE__ = {}\r\n  }\r\n\r\n  const cacheKey = `${maskedValue}-${mask}`\r\n  if (!findCaretPosition.__CACHE__[cacheKey]) {\r\n    const maskAsArray = mask.split('')\r\n    let maskedValueAsArray = maskedValue.split('')\r\n    if (maskedValueAsArray.length < maskAsArray.length) {\r\n      maskedValueAsArray = maskedValueAsArray.concat(\r\n        new Array(maskAsArray.length - maskedValueAsArray.length).fill(' ')\r\n      )\r\n    }\r\n\r\n    let position = -1\r\n    for (let index = 0; index < maskAsArray.length; index++) {\r\n      const el = maskAsArray[index]\r\n      if (el !== maskedValueAsArray[index]) {\r\n        // if (maskedValueAsArray[index] === ' ') return index\r\n        if (SUPPORTED_MASKS.indexOf(el) > -1) {\r\n          const pattern = new RegExp(\r\n            generatePatternFromMask(el),\r\n            IS_UNICODE_PROPERTY_SUPPORTED ? 'u' : ''\r\n          )\r\n\r\n          if (!pattern.test(maskedValueAsArray[index])) {\r\n            position = index\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    findCaretPosition.__CACHE__[cacheKey] =\r\n      position < 0 ? maskedValueAsArray.length : position\r\n  }\r\n\r\n  return findCaretPosition.__CACHE__[cacheKey]\r\n}\r\n\r\nexport {\r\n  isMaskedValue,\r\n  maskIfNotMasked,\r\n  unmask,\r\n  findCaretPosition,\r\n  generatePatternFromMask,\r\n  IS_UNICODE_PROPERTY_SUPPORTED,\r\n}\r\n",
    "static": true,
    "longname": "D:/Github/bbj-input-masking/src/TextInput/tools.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "SUPPORTED_MASKS",
    "memberof": "src/TextInput/tools.js",
    "static": true,
    "longname": "src/TextInput/tools.js~SUPPORTED_MASKS",
    "access": "public",
    "export": false,
    "importPath": "basis-input-masking/src/TextInput/tools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "isMaskedValue",
    "memberof": "src/TextInput/tools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/TextInput/tools.js~isMaskedValue",
    "access": "public",
    "export": true,
    "importPath": "basis-input-masking/src/TextInput/tools.js",
    "importStyle": "{isMaskedValue}",
    "description": "Check if the given value is masked with the given mask or not",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "masked or unmasked value"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "a bbj mask"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true when the value is masked with given mask , false otherwise"
    }
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "maskIfNotMasked",
    "memberof": "src/TextInput/tools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/TextInput/tools.js~maskIfNotMasked",
    "access": "public",
    "export": true,
    "importPath": "basis-input-masking/src/TextInput/tools.js",
    "importStyle": "{maskIfNotMasked}",
    "description": "Mask the given value with the given mask in case the value is not already masked with the\ngiven mask",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "masked or unmasked value"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "a bbj mask"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "a masked value"
    }
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "unmask",
    "memberof": "src/TextInput/tools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/TextInput/tools.js~unmask",
    "access": "public",
    "export": true,
    "importPath": "basis-input-masking/src/TextInput/tools.js",
    "importStyle": "{unmask}",
    "description": "Unmask the given value",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "maskedValue",
        "description": "masked string"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "the used mask to produce the masked string"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "findCaretPosition",
    "memberof": "src/TextInput/tools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/TextInput/tools.js~findCaretPosition",
    "access": "public",
    "export": true,
    "importPath": "basis-input-masking/src/TextInput/tools.js",
    "importStyle": "{findCaretPosition}",
    "description": "Given the masked string , find the next caret position depending on\nwhat is missing to complete the mask",
    "lineNumber": 188,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "maskedValue",
        "description": "masked string"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "the used mask to produce the masked string"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "generatePatternFromMask",
    "memberof": "src/TextInput/tools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/TextInput/tools.js~generatePatternFromMask",
    "access": "public",
    "export": true,
    "importPath": "basis-input-masking/src/TextInput/tools.js",
    "importStyle": "{generatePatternFromMask}",
    "description": "Generate a regex patter based on the give task",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "bbj string mask"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "regex for the give mask"
    }
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "IS_UNICODE_PROPERTY_SUPPORTED",
    "memberof": "src/TextInput/tools.js",
    "static": true,
    "longname": "src/TextInput/tools.js~IS_UNICODE_PROPERTY_SUPPORTED",
    "access": "public",
    "export": true,
    "importPath": "basis-input-masking/src/TextInput/tools.js",
    "importStyle": "{IS_UNICODE_PROPERTY_SUPPORTED}",
    "description": "When true , then the browser supports Unicode Property Escapes\notherwise it is false \n\n{@link https://github.com/tc39/proposal-regexp-unicode-property-escapes}",
    "lineNumber": 19,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# BASIS Input Masking\r\n\r\n[![Build Status](https://travis-ci.org/BasisHub/basis-input-masking.svg?branch=master)](https://travis-ci.org/BasisHub/basis-input-masking)\r\n![GitHub](https://img.shields.io/github/license/BasisHub/basis-input-masking)\r\n![GitHub file size in bytes](https://img.shields.io/github/size/BasisHub/basis-input-masking/dist/basis-input-masking.min.js)\r\n![GitHub tag (latest by date)](https://img.shields.io/github/v/tag/BasisHub/basis-input-masking)\r\n![David](https://img.shields.io/david/BasisHub/basis-input-masking)\r\n\r\n[Demo](https://basishub.github.io/basis-input-masking/docs/demo/) | [API](https://basishub.github.io/basis-input-masking/docs/api/) <br>\r\n\r\nA small javascript library to force inputs masking using BBj supported masks\r\n\r\n## Installation\r\n\r\n```\r\nyarn add BasisHub/bbj-masks BasisHub/basis-input-masking  \r\nnpm install BasisHub/bbj-masks BasisHub/basis-input-masking\r\n```\r\n\r\n## Usage \r\n\r\n```html\r\n<script src=\"node_modules/bbj-masks/dist/bbj-masks.min.js\"></script>\r\n<script src=\"node_modules/basis-input-masking/dist/basis-input-masking.js\"></script>\r\n```\r\n\r\n\r\n## Components\r\n\r\nThe library ships two components :\r\n\r\n- TextInput : force [bbj-string masks](https://github.com/BasisHub/bbj-masks#string-masks) on inputs\r\n- NumberInput : force [bbj-number masks](https://github.com/BasisHub/bbj-masks#number-masks) on inputs\r\n\r\n## TextInput\r\n\r\nThe TextInput will wrap text inputs and apply the given bbj string mask. You can combine masks with patterns to get accurate validation. In case the input lives in a form then the masked and the unmasked values will be submitted when the form is submitted\r\n\r\n```html\r\n<!-- masked value is +(49) 156 610 110 20 -->\r\n<input\r\n  class=\"bbj-text-masked\"\r\n  name=\"test\"\r\n  id=\"test\"\r\n  value=\"4915661011020\"\r\n  data-mask=\"+(00) 000 000 000 00\"\r\n/>\r\n\r\n<script>\r\n  document.addEventListener('DOMContentLoaded', function(e) {\r\n    new Basis.InputMasking.TextInput({\r\n      onUpdate: (maskedValue, rawValue, input) => {\r\n        // do something\r\n      },\r\n      onInvalid: (err, input) => {\r\n        // do something\r\n      },\r\n    })\r\n  })\r\n</script>\r\n```\r\n\r\n**Options**\r\n\r\n_Options can be passed via data attributes . For data attributes, append the option name to data-, as in data-mask_\r\n\r\n| Option | Default | Description                                                                                     |\r\n| ------ | ------- | ----------------------------------------------------------------------------------------------- |\r\n| mask   |         | The bbj string mask @see [BBj String Masks](https://github.com/BasisHub/bbj-masks#string-masks) |\r\n\r\n## NumberInput\r\n\r\nThe NumberInput will wrap text inputs and apply the given bbj number mask. In case the input lives in a form then the masked and the unmasked values will be submitted when the form is submitted\r\n\r\n```html\r\n<!-- masked value is 1,234 -->\r\n<input\r\n  class=\"bbj-number-masked\"\r\n  name=\"test\"\r\n  id=\"test\"\r\n  value=\"1234\"\r\n  data-mask=\"##,##0\"\r\n/>\r\n\r\n<script>\r\n  document.addEventListener('DOMContentLoaded', function(e) {\r\n    new Basis.InputMasking.NumberInput({\r\n      onUpdate: (maskedValue, rawValue, input) => {\r\n        // do something\r\n      },\r\n      onInvalid: (err, input) => {\r\n        // do something\r\n      },\r\n    })\r\n  })\r\n</script>\r\n```\r\n\r\n**Options**\r\n\r\n_Options can be passed via data attributes . For data attributes, append the option name to data-, as in data-mask_\r\n\r\n| Option               | Default | Description                                                                                                                                                                             |\r\n| -------------------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| mask                 |         | The bbj number mask @see [BBj Number Masks](https://github.com/BasisHub/bbj-masks#number-masks)                                                                                         |\r\n| min                  |         | The maximum value to accept for this input                                                                                                                                              |\r\n| max                  |         | The minimum value to accept for this input                                                                                                                                              |\r\n| step                 |         | A stepping interval to use when using up and down arrows to adjust the value, as well as for validation                                                                                 |\r\n| grouping-separator   | ,       | a char which will be used as a grouping separator                                                                                                                                       |\r\n| decimal-separator    | .       | a char which will be used as a decimal separator                                                                                                                                        |\r\n| force-trailing-zeros | false   | Affects the output by switching the way a mask with \"#\" characters in the trailing positions is filled. for example, the function NumberMask.mask(.10:\"#.##\") returns .10 instead of .1 |\r\n\r\n## License\r\n\r\nLicensed under the [MIT License](https://github.com/BasisHub/basis-input-masking/blob/master/LICENSE).",
    "longname": "D:\\Github\\bbj-input-masking\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"basis-input-masking\",\n  \"description\": \"A small javascript library to force inputs masking using BBj supported masks\",\n  \"main\": \"src/index.js\",\n  \"version\": \"v1.0.0\",\n  \"private\": false,\n  \"scripts\": {\n    \"watch\": \"./node_modules/.bin/webpack --watch --progress\",\n    \"test:watch\": \"./node_modules/.bin/karma start --auto-watch --browsers ChromeHeadless,FirefoxHeadless,Edge karma.conf.js\",\n    \"test\": \"./node_modules/.bin/karma start --single-run --browsers ChromeHeadless,FirefoxHeadless karma.conf.js\",\n    \"doc\": \"./node_modules/.bin/esdoc\",\n    \"build\": \"yarn test && yarn doc && ./node_modules/.bin/webpack\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.1.0\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.1.0\",\n    \"@babel/plugin-proposal-decorators\": \"^7.1.0\",\n    \"@babel/plugin-proposal-object-rest-spread\": \"^7.8.3\",\n    \"@babel/preset-env\": \"^7.1.0\",\n    \"babel-loader\": \"8.0.0-beta.0\",\n    \"babel-plugin-transform-imports\": \"^2.0.0\",\n    \"chai\": \"^4.2.0\",\n    \"copy-webpack-plugin\": \"^4.4.1\",\n    \"core-decorators\": \"^0.20.0\",\n    \"core-js\": \"^3.6.4\",\n    \"css-loader\": \"^0.28.9\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"formdata-polyfill\": \"^3.0.19\",\n    \"jquery\": \"^3.4.1\",\n    \"karma\": \"^4.4.1\",\n    \"karma-babel-preprocessor\": \"^8.0.1\",\n    \"karma-chai\": \"^0.1.0\",\n    \"karma-chrome-launcher\": \"^3.1.0\",\n    \"karma-edge-launcher\": \"^0.4.2\",\n    \"karma-firefox-launcher\": \"^1.3.0\",\n    \"karma-growl-reporter\": \"^1.0.0\",\n    \"karma-ie-launcher\": \"^1.0.0\",\n    \"karma-mocha\": \"^1.3.0\",\n    \"karma-mocha-reporter\": \"^2.2.5\",\n    \"karma-sourcemap-loader\": \"^0.3.7\",\n    \"karma-spec-reporter\": \"^0.0.32\",\n    \"karma-webpack\": \"^3.0.5\",\n    \"keycode\": \"^2.2.0\",\n    \"lodash\": \"^4.17.15\",\n    \"lodash-decorators\": \"^6.0.1\",\n    \"mocha\": \"^5.0.1\",\n    \"node-sass\": \"^4.13.0\",\n    \"sass-loader\": \"7.3.1\",\n    \"style-loader\": \"^0.20.2\",\n    \"uglifyjs-webpack-plugin\": \"^1.1.8\",\n    \"webpack\": \"^3.11.0\",\n    \"webpack-bundle-analyzer\": \"^3.6.0\"\n  },\n  \"dependencies\": {\n    \"bbj-masks\": \"BasisHub/bbj-masks\"\n  }\n}\n",
    "longname": "D:\\Github\\bbj-input-masking\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]